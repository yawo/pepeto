/*
 * client/less/base.less
 */

html,
body {
  height: 100%;
  font-family: 'Raleway';
  overflow-x: hidden;
}
h1,h2,h3,h4,h5{
  font-family: 'Roboto';
}
  
body > .wrap {
  min-height: 100%;
  height: auto !important;
  height: 100%;
  margin: 0 auto -@footer-height;
  padding: 0 0 @footer-height;
// background-image: url(/img/bg.jpg);
// background-size: cover;
// background-origin: content-box;
 //color: white;
  > .content {
    padding-top: @navbar-height;
    height:100%;
  }
}

.header1{
  text-align: center;
  font-family: 'Roboto';
  font-weight: 300;
  //color: white;
  font-size: 45px;
  //background-color: rgba(20,20,20,0.3);
  //width: 50%;
  //padding: 8px;
  border-radius: 7px;
  margin-bottom: 3px; 
}
 
a {
  color: #000;
}

code {
  font-size: 80%;
  background-color: #eee;
  color: #000;
}

.btn-inverse {
  background-color: #444;
  border-color: #444;
  color: #fff;

  &:hover,
  &:focus,
  &:active,
  &.active {
    background-color: #000;
    border-color: #000;
    color: #fff;
  }
}

.carousel a,
.nav,
.pagination {
  cursor: pointer;
}

.page-header {
  margin: 0 0 15px;
}

#spinner {
  background-color: rgba(0, 0, 0, 0.15);
  display: none;
  position: absolute;
  width: 100%;
  height: 100%;
  z-index: 99;
}
.thumbnail {
  background-color: rgba(19, 18, 18, 0.6);
  background-size: cover;
  border:0px;
  .caption {
    color: #FFFFFF;
    .border-radius(5px);
    background-color: rgba(0, 0, 0, 0.6);
  }
  .btn-primary {
    background-color: rgba(66, 139, 202, 0.7);
  }
  .btn-danger {
    background-color: rgba(217, 83, 79, 0.71);
  }

}
/*
We're using CSS transitions for when
the enter and move events are triggered
for the element that has the .repeated-item
class
*/
.repeated-item.ng-enter, .repeated-item.ng-move {
  -webkit-transition:0.5s linear all;
  -moz-transition:0.5s linear all;
  -o-transition:0.5s linear all;
transition:0.5s linear all;
opacity:0;
}

/*
   The ng-enter-active and ng-move-active
   are where the transition destination properties
   are set so that the animation knows what to
   animate.
 */
.repeated-item.ng-enter.ng-enter-active,
  .repeated-item.ng-move.ng-move-active {
opacity:1;
  }

/*
   We're using CSS keyframe animations for when
   the leave event is triggered for the element
   that has the .repeated-item class
 */
.repeated-item.ng-leave {
  -webkit-animation:0.5s my_animation;
  -moz-animation:0.5s my_animation;
  -o-animation:0.5s my_animation;
animation:0.5s my_animation;
}

@keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

/*
   Unfortunately each browser vendor requires
   its own definition of keyframe animation code...
 */
@-webkit-keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

@-moz-keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

@-o-keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

/* Have to set height explicity on ui-view 
to prevent collapsing during animation*/

.view-animate-container {
    position: relative;
}

[ui-view].ng-enter, [ui-view].ng-leave {
    position: absolute;
      left: 0;
        right: 0;
          -webkit-transition:all .5s ease-in-out;
              -moz-transition:all .5s ease-in-out;
                  -o-transition:all .5s ease-in-out;
                      transition:all .5s ease-in-out;
}

[ui-view].ng-enter {
    opacity: 0;
      -webkit-transform:scale3d(0.5, 0.5, 0.5);
        -moz-transform:scale3d(0.5, 0.5, 0.5);
          transform:scale3d(0.5, 0.5, 0.5);
}

[ui-view].ng-enter-active {
    opacity: 1;
      -webkit-transform:scale3d(1, 1, 1);
        -moz-transform:scale3d(1, 1, 1);
          transform:scale3d(1, 1, 1);
}

[ui-view].ng-leave {
    opacity: 1; 
      -webkit-transform:translate3d(0, 0, 0);
        -moz-transform:translate3d(0, 0, 0);
          transform:translate3d(0, 0, 0);
}

[ui-view].ng-leave-active {
    opacity: 0;
      -webkit-transform:translate3d(100px, 0, 0);
        -moz-transform:translate3d(100px, 0, 0);
          transform:translate3d(100px, 0, 0);
}
