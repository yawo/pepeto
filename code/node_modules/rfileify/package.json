{
  "name": "rfileify",
  "version": "1.3.1",
  "description": "Convert any code using rfile and derivatives so that it supports browserify",
  "main": "index.js",
  "bin": {
    "rfileify": "./bin/rfileify"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ForbesLindesay/rfileify.git"
  },
  "keywords": [
    "browserify",
    "fs",
    "readFileSync",
    "plugin",
    "static",
    "asset",
    "bundle",
    "base64",
    "uglify",
    "require",
    "resolve",
    "browser",
    "rfile"
  ],
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "dependencies": {
    "through": "~2.3.1",
    "falafel": "~0.3.1"
  },
  "devDependencies": {
    "mocha": "~1.9",
    "browserify": "~2.12",
    "rfile": "~1.0.0",
    "rhtml": "~0.0.1",
    "ruglify": "~1.0.0"
  },
  "readme": "# rfileify\r\n\r\n  Convert any code using rfile and derivatives so that it supports browserify.\r\n\r\n[![Build Status](https://travis-ci.org/ForbesLindesay/rfileify.png?branch=master)](https://travis-ci.org/ForbesLindesay/rfileify)\r\n[![Dependency Status](https://gemnasium.com/ForbesLindesay/rfileify.png)](https://gemnasium.com/ForbesLindesay/rfileify)\r\n\r\n  This module is a plugin for [browserify](http://browserify.org/) to parse the AST for `rfile` calls so that you can inline the file contents into your bundles.\r\n\r\n  In addition to supporting `rfile`, you can also use modules which internally use `rfile` providing they meet the simple requirement of taking an object with `dirname` property as their second argument and are listed in the array of valid file names modules in index.js.  Currently this is:\r\n\r\n  - [rfile](https://github.com/ForbesLindesay/rfile) - \"require\" static text files\r\n  - [ruglify](https://github.com/ForbesLindesay/ruglify) - \"require\" minified source code\r\n  - [rhtml](https://github.com/yaru22/rhtml) - \"require\" minified HTML\r\n\r\nEven though this module is intended for use with browserify, nothing about it is particularly specific to browserify so it should be generally useful in other projects.\r\n\r\n## Example with Browserify\r\n\r\n  For a main.js\r\n\r\n```javascript\r\nvar rfile = require('rfile');\r\nvar html = rfile('./robot.html');\r\nconsole.log(html);\r\n```\r\n\r\n  And a robot.html\r\n\r\n```html\r\n<b>beep boop</b>\r\n```\r\n\r\n  first `npm install rfileify` into your project, then:\r\n\r\n### on the command-line\r\n\r\n```\r\n$ browserify -t rfileify example/main.js > bundle.js\r\n```\r\n\r\nnow in the bundle output file,\r\n\r\n```javascript\r\nvar html = rfile('./robot.html');\r\n```\r\n\r\nturns into:\r\n\r\n```javascript\r\nvar html = \"<b>beep boop</b>\";\r\n```\r\n\r\n(and `require('rfile')` turns into `undefined` so you're not loading code you're never going to use).\r\n\r\n### or with the API\r\n\r\n```javascript\r\nvar browserify = require('browserify');\r\nvar fs = require('fs');\r\n\r\nvar b = browserify('example/main.js');\r\nb.transform('rfileify');\r\n\r\nb.bundle().pipe(fs.createWriteStream('bundle.js'));\r\n```\r\n\r\n## Direct Usage\r\n\r\nA tiny command-line program ships with this module for easier debugging and if you just want this without any of the rest of browserify.\r\n\r\n```\r\nnpm install rfileify -g\r\nrfileify --help\r\n```\r\n\r\n## License\r\n\r\nMIT\r\n\r\n![viewcount](https://viewcount.jepso.com/count/ForbesLindesay/rfileify.png)\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ForbesLindesay/rfileify/issues"
  },
  "homepage": "https://github.com/ForbesLindesay/rfileify",
  "_id": "rfileify@1.3.1",
  "_from": "rfileify@1.3.1"
}
